// Generated by CoffeeScript 1.4.0

!(function(context, definition) {
  if ('function' === typeof require && typeof exports === typeof module) {
    return module.exports = definition;
  }
  return context.MiniCoffeeCup = definition;
})(this, (function() {
  var c;
  c = function(o, templates) {
    this.o = o != null ? o : {};
    this.templates = templates != null ? templates : {};
    this.o.doctypes = this.o.doctypes || {};
    this.o.doctypes[5] = '<!doctype html>';
    this.o.html_block_tags = ['a', 'abbr', 'address', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'blockquote', 'body', 'button', 'canvas', 'caption', 'cite', 'code', 'colgroup', 'command', 'data', 'datagrid', 'datalist', 'dd', 'del', 'details', 'dfn', 'div', 'dl', 'dt', 'em', 'embed', 'eventsource', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'html', 'i', 'iframe', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'mark', 'map', 'menu', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'pre', 'progress', 'q', 'ruby', 'rp', 'rt', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr'];
    this.o.html_atomic_tags = ['area', 'base', 'br', 'col', 'hr', 'img', 'input', 'link', 'meta', 'param'];
    this.o.autoescape = this.o.autoescape || false;
    this.o.special_chars = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };
    this.o.format = this.o.format || false;
    this.o.indent = (this.o.format || '') && (this.o.indent || '  ');
    return this.o.newline = (this.o.format || '') && (this.o.newline || "\n");
  };
  c.prototype.render = function(f, locals) {
    var globals, html_attributes, l, o, t, tag, _i, _j, _len, _len1, _ref, _ref1;
    t = '';
    l = 0;
    o = this.o;
    o.indent = (function(i) {
      return function() {
        return (new Array(l)).join(i);
      };
    })(o.indent);
    globals = {
      h: function(s) {
        return ('' + s).replace(/[&<>"']/g, function(c) {
          return o.special_chars[c] || c;
        });
      },
      tag: function(p, a, aa, s) {
        return function() {
          var h, _a;
          h = arguments[arguments.length - 1];
          if (typeof h !== 'function' && typeof h !== 'string') {
            h = '';
          }
          l++;
          _a = typeof arguments[0] === 'object' && typeof a === 'function' ? a(arguments[0]) : '';
          if (typeof h === 'function') {
            t += (function() {
              t = '';
              h.call(locals);
              if (t !== '') {
                t = o.newline + t + o.indent();
              }
              return t = o.indent() + p + _a + aa + t + s + o.newline;
            })();
          } else {
            t += o.indent() + p + _a + aa + (typeof h === 'undefined' ? '' : o.autoescape ? globals.h(h) : h) + s + o.newline;
          }
          return l--;
        };
      },
      coffeescript: function(f) {
        return globals.script(('' + f).replace(/^function \(\) ?{\s*/, '').replace(/\s*}$/, ''));
      },
      comment: function(s, f) {
        return globals.tag('<!--' + s, null, '', '-->')(f);
      },
      doctype: function(v) {
        return t = o.doctypes[v || 5] + t;
      },
      ie: function(s, f) {
        return globals.tag('<!--[if ' + s + ']>', null, '', '<![endif]-->')(f);
      },
      text: function(s) {
        return t += o.autoescape ? globals.h(s) : s;
      },
      block: function(s, f) {
        return globals.tag('{{' + s, null, '}}', '{{/' + (s.split(/ +/)[0]) + '}}')(f);
      },
      markup: function(s) {
        return t += s;
      }
    };
    html_attributes = function(a) {
      var k, tt;
      tt = '';
      for (k in a) {
        tt += typeof a[k] !== 'boolean' ? ' ' + k + '="' + (o.autoescape ? globals.h(a[k]) : a[k]) + '"' : val === true ? ' ' + k : '';
      }
      return tt;
    };
    _ref = o.html_block_tags;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tag = _ref[_i];
      globals[tag] = globals.tag('<' + tag, html_attributes, '>', '</' + tag + '>');
    }
    _ref1 = o.html_atomic_tags;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      tag = _ref1[_j];
      globals[tag] = globals.tag('<' + tag, html_attributes, '/>', '');
    }
    (Function('globals', 'locals', 'with(globals){(' + f + ').call(locals)}'))(globals, locals);
    return t;
  };
  return c;
})());
